/*
有效数字（按顺序）可以分成以下几个部分：

一个 小数 或者 整数
（可选）一个 'e' 或 'E' ，后面跟着一个 整数

小数（按顺序）可以分成以下几个部分：
（可选）一个符号字符（'+' 或 '-'）
下述格式之一：
    至少一位数字，后面跟着一个点 '.'
    至少一位数字，后面跟着一个点 '.' ，后面再跟着至少一位数字
    一个点 '.' ，后面跟着至少一位数字

整数（按顺序）可以分成以下几个部分：
（可选）一个符号字符（'+' 或 '-'）
至少一位数字
部分有效数字列举如下：["2", "0089", "-0.1", "+3.14", "4.", "-.9", "2e10", "-90E3", "3e+7", "+6e-1", "53.5e93", "-123.456e789"]

部分无效数字列举如下：["abc", "1a", "1e", "e3", "99e2.5", "--6", "-+3", "95a54e53"]

给你一个字符串 s ，如果 s 是一个 有效数字 ，请返回 true 。

*/
class Solution {
public:
    bool isNumber(string s) {
        int l = 0, r = s.size() - 1;
        //去空格
        while (l <= r && s[l] == ' ') l ++ ;
        while (l <= r && s[r] == ' ') r -- ;
        if (l > r) return false;
        s = s.substr(l, r - l + 1);
        //去正负号
        if (s[0] == '+' || s[0] == '-') s = s.substr(1);
        if (s.empty()) return false;
        //数字部分第一位有效判别   .e   .E   =  false
        if (s[0] == '.' && (s.size() == 1 || s[1] == 'e' || s[1] == 'E'))
            return false;
        //数字部分第一位必须有  小数/整数+可选e+正数
        int dot = 0, e = 0;
        for (int i = 0; i < s.size(); i ++ ) {
            if (s[i] == '.') {
                if (dot > 0 || e > 0) return false;                 //dot最多只有一个，dot必须在e前面
                dot ++ ;
            } else if (s[i] == 'e' || s[i] == 'E') {
                if (!i || i + 1 == s.size() || e > 0) return false; //e不能在第一位，e不能在最后一位、e也只能有一个
                if (s[i + 1] == '+' || s[i + 1] == '-') {
                    if (i + 2 == s.size()) return false;            //e后面应该只有一个正负号，且正负号不能在最后一位
                    i ++ ;
                }
                e ++ ;
            } else if (s[i] < '0' || s[i] > '9') return false;      //其他只能是0-9
        }

        return true;
    }
};
