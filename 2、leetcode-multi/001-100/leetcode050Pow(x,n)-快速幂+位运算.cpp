/*
实现 [pow(*x*, *n*)](https://www.cplusplus.com/reference/valarray/pow/) ，即计算 x 的 n 次幂函数（即，x的n次方）。

**示例 1：**
输入：x = 2.00000, n = 10
输出：1024.00000

- `-100.0 < x < 100.0`
- `-231 <= n <= 231-1`
- `-104 <= xn <= 104`
*/

//用二进制来处理
//也就是 n化为二进制表示
//n=1001 也就是n = 2^3 + 2^0,可以通过遍历n的位，用x*=x来累乘计算x^2^0
//依次求x^(2^i)，然后如果n对应的i位为1，则累乘
class Solution {
public:
    double myPow(double x, int n) {
        typedef long long LL;
        bool is_minus =   n < 0;//判断 n 的符号， n<0 返回一个true
        double res = 1;
        for (LL k = abs(LL(n)); k; k >>= 1) {//k表示 n 的绝对值，每次 k 右移 1 ，也就是 除以2
            if (k & 1) res *= x;             //每一次枚举的都是 k 的个位， 然后去掉 个位，下一次枚举的时候枚举的就是k 的十位了
            x *= x; // 每次更新 x，自身平方得到二进制的幂项 的 下一项 。
            //第一次乘以 x代表，当枚举 所在位数 是1 的时候，就要在答案乘上 此  位对应的 x的2的位数次 幂了（截图里面乘积式子里的每一项）
		    //下一项是这一项的平方，不管下一位是不是1，都要 依次叠乘，当 二进制所在位数是 1 的时候，在答案上面乘以这一项 
        }
        if (is_minus) res = 1 / res;//n是负数的时候，处理
        return res;
    }
};