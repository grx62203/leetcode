/*
给你一个非负整数数组 `nums` ，你最初位于数组的第一个位置。
数组中的每个元素代表你在该位置可以跳跃的最大长度。
你的目标是使用最少的跳跃次数到达数组的最后一个位置。
假设你总是可以到达数组的最后一个位置。


**示例 1:**
输入: nums = [2,3,1,1,4]
输出: 2
解释: 跳到最后一个位置的最小跳跃数是 2。
     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。
- `1 <= nums.length <= 104`
- `0 <= nums[i] <= 1000`
*/

class Solution {
public:
    int jump(vector<int>& nums) {
        int n = nums.size();
        vector<int> f(n);

        for (int i = 1, j = 0; i < n; i ++ ) {
        	//当第一次出现了 可以一步跳到 i、超过 i 的位置，就在此位置上跳=====i位置的最小步数路线就是从j跳过去的
            while (j < i && j + nums[j] < i) j ++ ;
            //每次更新的是跳到i 位置 最少的 步数，就算是没有while，也只是代表 最少步数的某一布不是可以的最大步距
            f[i] = f[j] + 1;// + 1 就是跳一步   
        }
        return f[n - 1];
    }
};