/*
给你一个字符串 `s` 和一个字符规律 `p`，请你来实现一个支持 `'.'` 和 `'*'` 的正则表达式匹配。

- `'.'` 匹配任意单个字符
- `'*'` 匹配零个或多个前面的那一个元素

所谓匹配，是要涵盖 **整个** 字符串 `s`的，而不是部分字符串。

**示例 1：**

```
输入：s = "aa" p = "a"
输出：false
解释："a" 无法匹配 "aa" 整个字符串。
```

**示例 2:**

```
输入：s = "aa" p = "a*"
输出：true
解释：因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 "aa" 可被视为 'a' 重复了一次。
```

**示例 3：**

```
输入：s = "ab" p = ".*"
输出：true
解释：".*" 表示可匹配零个或多个（'*'）任意字符（'.'）。
```

**示例 4：**

```
输入：s = "aab" p = "c*a*b"
输出：true
解释：因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 "aab"。
```

**示例 5：**

```
输入：s = "mississippi" p = "mis*is*p*."
输出：false
```

 

**提示：**

- `1 <= s.length <= 20`
- `1 <= p.length <= 30`
- `s` 可能为空，且只包含从 `a-z` 的小写字母。
- `p` 可能为空，且只包含从 `a-z` 的小写字母，以及字符 `.` 和 `*`。
- 保证每次出现字符 `*` 时，前面都匹配到有效的字符
*/

//动态规划dp---循环或者递归，循环效率更高
    //状态表示
    	//集合           所有的 s[1~i]和p[1~i]的匹配方案  //*到底表示几个字符
    	//属性(存储的值)  bool 是否存在一个合法方案
    //状态计算
    	//p[j] ！= '*'   (s[i] == p[i] || p[j] == '.' ) && f(i-1,j-1)
    	//p[j] == '*'    需要找到*代表多少个字符,枚举
			//表示0个字符||表示1个字符                           ||表示2个字符                                                      ||等等
    		//f(i, j-2)||f(i, j-1)&&(s[i]==p[j-1]||p[j-1]=='.')||f(i-2, j-2)&&(s[i]==p[j-1]||p[j-1]=='.')&&(s[i-1]==p[j-1]||p[j-1]=='.') ||

// (a*) 是一个整体
// 需要从所有匹配方式中找到一个合法方案，dp每次可以处理一堆方案
//  f(i,j)   = f(i, j-2)   || f(i-1, j-2)&&(s[i]与p[j-1]匹配)      || f(i-2, j-2)&&(s[i]与p[j-1]匹配)&&(s[i-1]与p[j-2]匹配) | .....
//  f(i-1,j) =                f(i-1, j-2)                        || f(i-2, j-2)&&(s[i-1]与p[j-2]匹配)  || .....
    //因此发现 f(i-1,j) &&(s[i]与p[j-1]匹配)   就是f(i,j)的后半部分
// f(i,j) =  f(i,j-2) || f(i-1,j) &&(s[i]与p[j-1]匹配)

//f(1,0)一定是不匹配的，所有j从1开始循环，i也要从1开始，前面赋予空格都是防止下标越界

class Solution{
public:
    bool isMatch(string s, string p){
        int n = s.size(), m = p.size();
        s = ' ' + s, p = ' ' + p;
        vector<vector<bool>> f(n+1,vector<bool>(m+1));
        f[0][0] = true;
        for(int i = 0; i <= n; i++){
            for(int j = 1; j<= m; j++){
                if(j +1 <= m && p[j + 1] == '*') continue;
                if(i && p[j] != '*'){
                    f[i][j] = f[i - 1][j - 1] && (s[i] == p[j] || p[j] == '.');
                }
                else if(p[j] == '*'){
                    f[i][j] = f[i][j - 2] || i && f[i-1][j] && (s[i] == p[j-1] || p[j-1] == '.');
                }
            }
        }
        return f[n][m];
    }
};