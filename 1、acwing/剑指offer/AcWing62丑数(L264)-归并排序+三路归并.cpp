/*
我们把只包含质因子 2、3 和 5 的数称作丑数（Ugly Number）。

例如 6、8 都是丑数，但 14 不是，因为它包含质因子 7。

求第 n 个丑数的值。

数据范围
1≤n≤1000
样例
输入：5

输出：5
注意：习惯上我们把 1 当做第一个丑数。
*/
/*
	三指针的思想，所以定义3个指针i, j, k。
	vector存储的是丑数数组，一开始只有1个1，后面 动态添加元素进vector。
	t取出的是3个指针分别指向的3个子数组(2 3 5)中的最小值。如果最小值是3个子数组中的哪一个，就把里面的指针i j k 增1。因为可能同时出现在多个数组，所以用3个if来表示。
	最后输出vector的最后一位，就是第n个丑数。
*/
class Solution {
public:
    int nthUglyNumber(int n) {
        vector<int> q;
        q.push_back(1);
        int i = 0, j = 0, k = 0;
        while (--n)
        {
            int t = min(q[i] * 2, min(q[j] * 3, q[k] * 5));
            //贪心思想
            //每个丑数都乘以2、3、5的结果还是丑数
            //每个丑数都乘以2、3、5的结果都应该被遍历到
            //所以变量是丑数  与  2/3/5
            //i、j、k分开是因为丑数*2/3/5的结果不是线性的
            q.push_back(t);
            if (q[i] * 2 == t) i ++ ;
            if (q[j] * 3 == t) j ++ ;
            if (q[k] * 5 == t) k ++ ;
        }
        return q.back();
    }
};
