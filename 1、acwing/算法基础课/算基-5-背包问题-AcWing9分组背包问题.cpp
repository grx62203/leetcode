/*
有 N 组物品和一个容量是 V 的背包。

每组物品有若干个，同一组内的物品最多只能选一个。
每件物品的体积是 vij，价值是 wij，其中 i 是组号，j 是组内编号。

求解将哪些物品装入背包，可使物品总体积不超过背包容量，且总价值最大。

输出最大价值。

输入格式
第一行有两个整数 N，V，用空格隔开，分别表示物品组数和背包容量。

接下来有 N 组数据：

每组数据第一行有一个整数 Si，表示第 i 个物品组的物品数量；
每组数据接下来有 Si 行，每行有两个整数 vij,wij，用空格隔开，分别表示第 i 个物品组的第 j 个物品的体积和价值；
输出格式
输出一个整数，表示最大价值。

数据范围
0<N,V≤100
0<Si≤100
0<vij,wij≤100
*/
/*
0、DP
    状态表示 f[i][j] 
        集合   
            从前i个物品选择，背包容量为j时所有的选法
            条件 （数目限制、体积限制）
                只从前i个选
                总体积不超过j
        属性   
            最大值
            (最小值)
            (数量)
    状态计算
        本质就是集合的划分
        二维     j 正序 f[i][j] = max(f[i][j] , f[i-1][j-v[i][k]] + w[i][k]); ------------------for (int k = 0 ; k < s[i] ; k ++ )每组只选一个，if(j>=v[i][k]) 
        一维优化 j 倒序 f[j]    = max(f[j] ,    f[j - v[i][k]] + w[i][k]);----------------------for (int k = 0 ; k < s[i] ; k ++ )每组只选一个，if(j>=v[i][k])  
    优化
        方程做等价变形
    遍历i，是遍历物品；遍历j，是遍历背包的容量，遍历k，是选择物品的条件，还需要判断物品的体积与剩余容量
    二维会存在不选的情况去用上一层初始化，或者有多个当前物品会合并到k=0的情况，但一维不存在
    二维化为一维的条件，且只有完全背包是反01
        a、f[i] 仅用到了f[i-1]层
        b、j与j-v[i] 均小于j，这样子就可以看为滚动数组倒序---若用到前一层的状态时,从大到小枚举, 反之从小到大哦
*/


#include <iostream>
#include <algorithm>

using namespace std;

const int N = 110;

int n, m;
int v[N][N], w[N][N], s[N];
int f[N];

int main()
{
    cin >> n >> m;

    for (int i = 1; i <= n; i ++ )
    {
        cin >> s[i];
        for (int j = 0; j < s[i]; j ++ )
            cin >> v[i][j] >> w[i][j];//当前组的当前物品只能选一个
    }
/*************************************************************************************/
    //二维
    for(int i = 1 ; i <= n ; i ++ )
        for(int j = 0 ; j <= m ; j ++ ){
            f[i][j]=f[i-1][j];  //不选
            for(int k = 0 ; k < s[i] ; k ++ ){
                if(j>=v[i][k])     f[i][j]=max(f[i][j], f[i-1][j-v[i][k]]+w[i][k]);  
            }
        }
    cout<<f[n][m]<<endl;
/*************************************************************************************/
    //一维优化（类01背包）
    for (int i = 1 ; i <= n ; i ++ )//-----------------遍历组
        for (int j = m ; j >= 0 ; j -- )//-------------遍历背包容积
            for (int k = 0; k < s[i] ; k ++ )//---------遍历当前组的每一个物品
                if (v[i][k] <= j)  f[j] = max(f[j], f[j - v[i][k]] + w[i][k]);
    cout << f[m] << endl;

    return 0;
}