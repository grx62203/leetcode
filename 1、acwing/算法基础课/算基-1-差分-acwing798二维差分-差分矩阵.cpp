/*
输入一个 n 行 m 列的整数矩阵，再输入 q 个操作，每个操作包含五个整数 x1,y1,x2,y2,c，其中 (x1,y1)(x1,y1) 和 (x2,y2)(x2,y2) 表示一个子矩阵的左上角坐标和右下角坐标。

每个操作都要将选中的子矩阵中的每个元素的值加上 c。

请你将进行完所有操作后的矩阵输出。

输入格式
第一行包含整数 n,m,q

接下来 n 行，每行包含 m 个整数，表示整数矩阵。

接下来 q 行，每行包含 5 个整数 x1,y1,x2,y2,c表示一个操作。

输出格式
共 n 行，每行 m 个整数，表示所有操作进行完毕后的最终矩阵。

数据范围
1≤n,m≤1000
1≤q≤100000
1≤x1≤x2≤n
1≤y1≤y2≤m
−1000≤c≤1000
−1000≤矩阵内元素的值≤1000
*/
#include <iostream>
using namespace std;

const int N = 1010;

int n, m, q;
int a[N][N], b[N][N];//a是b的前缀和矩阵，b是a的差分矩阵

void insert(int x1, int y1, int x2, int y2, int c)
{
    b[x1][y1] += c;    //子矩阵的左上角坐标 + c
    b[x2 + 1][y1] -= c;//子矩阵的右上角坐标右一位 -c
    b[x1][y2 + 1] -= c;//子矩阵的左下角坐标下一位 -c
    b[x2 + 1][y2 + 1] += c;//子矩阵的右下角坐标 右下一位 +c
    //二维差分主要就是在这个面积的范围开始 + c,超出这个范围的 每一个小方块都要 - c，保证求前缀和
    //左上角 + 1，可以保证包括左上角小方块的所有前缀和（a数组的元素）都 +c，包括出界的点的前缀和
    //右上角右一位 - 1 可以保证y2右边所有的 出界点都避免了 +c这个影响
    //左下角下一位 - 1 可以保证x2下边所有的 出界点都避免了 +c这个影响
    //但是x2、y2的右下角部分（上两行的重叠部分），就会避免 +c影响 两次，
    //所以就需要在 这个重叠部分的左上角点（x2+1，y2+1） +c
}

int main()
{
    scanf("%d%d%d", &n, &m, &q);

    for (int i = 1; i <= n; i ++ )
        for (int j = 1; j <= m; j ++ )
            scanf("%d", &a[i][j]);//初始化a数组

    for (int i = 1; i <= n; i ++ )
        for (int j = 1; j <= m; j ++ )
            //第一次差分构造之后，b数组中前n项的和就是a[n]（也就是子矩阵的面积）    
            insert(i, j, i, j, a[i][j]);//初始化b数组操作=将a的值先构造差分矩阵
            
    while (q -- )//q次询问
    {
        int x1, y1, x2, y2, c;//子矩阵 是闭区间，c是需要增加的量
        cin >> x1 >> y1 >> x2 >> y2 >> c;
        //第二次差分构造之后，b数组中前n项的和就是假设增加成功的  新a[n]
        insert(x1, y1, x2, y2, c);      //改造b数组操作=用增加量构造差分矩阵
        
    }

    for (int i = 1; i <= n; i ++ )
        for (int j = 1; j <= m; j ++ )
            //这个过程之后b数组就变成了 增加成功的 新 a数组
            b[i][j] += b[i - 1][j] + b[i][j - 1] - b[i - 1][j - 1];//利用b数组求其前缀和来构造新a数组的过程
        	

    for (int i = 1; i <= n; i ++ )
    {
        for (int j = 1; j <= m; j ++ ) printf("%d ", b[i][j]);//将新a数组输出
        puts("");
    }

    return 0;
}