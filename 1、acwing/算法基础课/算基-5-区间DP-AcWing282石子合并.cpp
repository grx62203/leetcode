/*
设有 N 堆石子排成一排，其编号为 1，2，3，…，N。

每堆石子有一定的质量，可以用一个整数来描述，现在要将这 N 堆石子合并成为一堆。

每次只能合并相邻的两堆，合并的代价为这两堆石子的质量之和，合并后与这两堆石子相邻的石子将和新堆相邻，合并时由于选择的顺序不同，合并的总代价也不相同。

例如有 4 堆石子分别为 1 3 5 2， 我们可以先合并 1、2 堆，代价为 4，得到 4 5 2， 又合并 1，2 堆，代价为 9，得到 9 2 ，再合并得到 11，总代价为 4+9+11=24；

如果第二步是先合并 2，3 堆，则代价为 7，得到 4 7，最后一次合并代价为 11，总代价为 4+7+11=22。

问题是：找出一种合理的方法，使总的代价最小，输出最小代价。

输入格式
第一行一个数 N 表示石子的堆数 N。

第二行 N 个数，表示每堆石子的质量(均不超过 1000)。

输出格式
输出一个整数，表示最小代价。
数据范围
1≤N≤300
*/
/*
0、DP
    状态表示 f[i][j]
        集合   
            所有 第i堆石头到 第j 堆石头合并成一堆 的合并方式的代价 最小值
            条件 （数目限制、体积限制）                 
        属性   
            (最大值)
            最小值
            (数量)
    状态计算
        本质就是集合的划分
        以最后一次合并的分界线位置来分类
        f[l][r] = min(f[l][r], f[l][k] + f[k + 1][r] + s[r] - s[l - 1]);---------f[l][r] = 1e8;for (int k = l; k < r; k ++ )
        最小总代价 = 左边总代价 + 右边总代价 + 最后一次合并代价
*/


#include <iostream>
#include <algorithm>

using namespace std;

const int N = 310;

int n;
int s[N];
int f[N][N];

int main()
{
    scanf("%d", &n);
    for (int i = 1; i <= n; i ++ ) scanf("%d", &s[i]);

    //求前缀和 
    for (int i = 1; i <= n; i ++ ) s[i] += s[i - 1];
    //长度==遍历左堆i到右堆j的长度，从2到n
    for (int len = 2; len <= n; len ++ )
        //起点==遍历左堆i，从 1 到 n - len + 1
        for (int i = 1; i + len - 1 <= n; i ++ )
        {
            int l = i, r = i + len - 1;
            f[l][r] = 1e8;//求最小值，预处理为极大值
            //左右区间==遍历 最后一次合并的分界线左边个数，从1 到 r-1
            for (int k = l; k < r; k ++ )
                f[l][r] = min(f[l][r], f[l][k] + f[k + 1][r] + s[r] - s[l - 1]);
        }

    printf("%d\n", f[1][n]);
    return 0;
}
