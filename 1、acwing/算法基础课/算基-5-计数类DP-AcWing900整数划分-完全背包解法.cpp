/*
一个正整数 n 可以表示成若干个正整数之和，形如：n=n1+n2+…+nk，其中 n1≥n2≥…≥nk,k≥1。

我们将这样的一种表示称为正整数 n 的一种划分。

现在给定一个正整数 n，请你求出 n 共有多少种不同的划分方法。

输入格式
共一行，包含一个整数 n。

输出格式
共一行，包含一个整数，表示总划分数量。

由于答案可能很大，输出结果请对 109+7 取模。

数据范围
1≤n≤1000
*/
/*
由于不限制划分方案的每一个数的具体数量，所以不是01，是完全背包
完全背包解法
状态表示：
f[i][j]表示只从1~i中选，且总和等于j的方案数的数量（求和）
状态转移方程:
f[i][j] = f[i - 1][j] + f[i][j - i];
*/

#include <iostream>
#include <algorithm>

using namespace std;

const int N = 1010, mod = 1e9 + 7;

int n;
int f[N];

int main()
{
    cin >> n;
    // 容量为0时，前 i 个物品全不选也是一种方案
    f[0] = 1;
    //一维优化（反01背包）
    for (int i = 1; i <= n; i ++ )//---------相当于选择的物品
        for (int j = i; j <= n; j ++ )//-----相当于背包容积
            f[j] = (f[j] + f[j - i]) % mod;
    cout << f[n] << endl;

    return 0;
}



